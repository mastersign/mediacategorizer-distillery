;; # Application Core

(ns distillery.core
  (:require [clojure.pprint :refer (pprint)])
  (:require [mastersign.trace :refer :all])
  (:require [distillery.data :refer :all])
  (:require [distillery.tasks :as dt])
  (:gen-class))

;; ## Core Tasks

;; The following functions represent the most coarse processing steps
;; in this application. The main data structures in this context are the
;; [Job Description](data-structures.html#JobDescription)
;; and the [Analysis Results](data-structures.html#AnalysisResults).

(defn prepare-and-analyze
  "Takes a job description, loads all referenced data,
  and matches the speech recognition results against the category resources.
  Returns an extended version of the job description with the loaded
  data and the matching results attached."
  [job-descr]
  (dt/process-pipeline
   "Analysis"
   job-descr
   dt/load-speech-recognition-results
   dt/analyze-speech-recognition-results
   dt/load-categories
   dt/analyze-categories
   dt/match-videos
   dt/lookup-categories-matches
   dt/matching-stats))

(defn generate-xml-result-file!
  "Takes an extended job description generated by `prepare-and-analyze`
  and generates the XML result file for the job.
  Returns nil."
  [job]
  (trace-block
   "XML Result Generation"
   (dt/save-result-as-xml job)))

(defn generate-website!
  "Takes an extended job description generated by `prepare-and-analyze`
  and generates a static website with extensive visualization of the result.
  Returns nil."
  [job]
  (trace-block
   "Result Visualization"
   (dt/prepare-output-dir job)
   (dt/process-task-group
    "Website Generation" job #(% job)
    [dt/create-index-page
     dt/create-categories-page
     dt/create-category-pages
     dt/create-videos-page
     dt/create-video-pages]))
  nil)

(defn run-complete!
  "Takes a job description, and executes the complete process
  defined by the job."
  [job-descr]
  (let [job (prepare-and-analyze job-descr)]
    (generate-xml-result-file! job)
    (when (get-in job [:configuration :visualize-result])
      (generate-website! job)))
  nil)

;; ## Entry Point

(defn -main
  "The entry point for the application.
  Takes the path of the job file as the only argument."
  [job-file]
  (-> job-file
      load-data
      run-complete!)
  (System/exit 0))

;; ## Debugging
;;
;; Some prepared expressions for interactive debugging
;;
;;     (def job-file "S:\\Temp\\MediaCategorizerOutput\\_tmp_\\job.edn")
;;     (def job-descr (load-data job-file))
;;     (def job (prepare-and-analyze job-descr))
;;     (generate-xml-result-file! job)
     (generate-website! job)
;;     (run-complete! job-descr)
;;

(def job (assoc-in job [:configuration :parallel-proc] true))
(def job (assoc-in job [:configuration :parallel-proc] false))

